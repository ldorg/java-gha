name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests
      run: mvn clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Code Coverage
      run: mvn jacoco:report
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./target/site/jacoco/jacoco.xml
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Run Checkstyle
      run: mvn checkstyle:check
      continue-on-error: true
      
    - name: Run SpotBugs
      run: mvn spotbugs:check
      continue-on-error: true

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar
        retention-days: 30

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t spring-boot-template:test .
        docker images spring-boot-template:test

  deploy:
    name: Deploy to Nexus Repository
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.event_name != 'pull_request'
    
    # Set environment variables from GitHub secrets for the entire job
    env:
      NEXUS_URL: ${{ secrets.NEXUS_URL }}
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
        
    - name: Configure Maven settings
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings>
          <servers>
            <server>
              <id>nexus-releases</id>
              <username>${NEXUS_USERNAME}</username>
              <password>${NEXUS_PASSWORD}</password>
            </server>
            <server>
              <id>nexus-snapshots</id>
              <username>${NEXUS_USERNAME}</username>
              <password>${NEXUS_PASSWORD}</password>
            </server>
          </servers>
        </settings>
        EOF
    
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Set version for snapshot or release
      run: |
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          # For main branch, use SNAPSHOT version
          mvn versions:set -DnewVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')-SNAPSHOT
        else
          # For tags, use release version (remove -SNAPSHOT if present)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          mvn versions:set -DnewVersion=$TAG_VERSION
        fi
        mvn versions:commit
    
    - name: Build and package with deployment profile
      run: mvn clean package -DskipTests -Pnexus-deploy
      
    - name: Deploy to Nexus
      run: mvn deploy -DskipTests -Pnexus-deploy
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-artifacts
        path: |
          target/*.jar
          target/*.pom
        retention-days: 30